{"name":"Copy of README.md of cl-one-time-password.","tagline":"One time passwords (hotp rfc4226, totp rfc6238) as used in two factor authentication systems such as Google's.","body":"# Introduction\r\n\r\nOne time passwords provide a way to do authentication based on a\r\nshared secret without revealing that secret to spies on the\r\ncommunciation channel.\r\n\r\nTwo well specified ways of generating OTPs are:\r\n * HOTP - An HMAC-Based One-Time Password Algorithm, i.e. RFC 4226\r\n * TOTP - Time-Based One-Time Password Algorithm , i.e. RFC 6238\r\n\r\nThese are commonly used as one factor in two factor authentication\r\nsystems.  For example Google uses these.  For example Google's\r\nAuthenticator App for most smart phones will generate one time\r\npasswords once it has been configured with the shared secret(s) for\r\nyour account(s).\r\n\r\nCl-one-time-passwords implements HOTP and TOTP in Common Lisp.\r\n\r\n# Example\r\n\r\n1. Load the code into your lisp image.\r\n2. Share a secret with Google's Authenticator App on your smart phone by scanning this QDR code:<br/>\r\n![QR Code](https://www.evernote.com/shard/s2/sh/b6ef5d38-95d4-4f9c-9e87-2a9322e27cbc/db903985ef9ab7f7d4444854f13dc604/res/75b5ae09-a4ff-45e7-84c9-f9e5328ca567/skitch.png?resizeSmall&width=832 \"otpauth://totp/test@example.com?secret=jbswy3dpehpk3pxpjbswy3dpehpk3pxp\")\r\n\r\n3. Compair the values that Authenticator is generating with the ones this code generates:\r\n```common-lisp\r\n  (totp:totp \"48656C6C6F21DEADBEEF48656C6C6F21DEADBEEF\")\r\n```\r\n\r\nThey ought to be the same, but if your phone and computer clock are out of sync by a N seconds then every 30 seconds for N seconds they won't be the same.\r\n\r\nThat QR encodes this URL otpauth://totp/test@example.com?secret=jbswy3dpehpk3pxpjbswy3dpehpk3pxp\r\nwhere the secret is the base32 encoding of the secret we passed to totp:totp in step 3, there the value was a 40 character hex number, i.e. 20 bytes.\r\n\r\n# API\r\n\r\n```common-lisp\r\nhotp:*digits*\r\n```\r\nThe number of digits to return in the htop values, defaults to six.  See the RFC for details.\r\n\r\n```common-lisp\r\nhotp:*hmac-sha-mode*\r\n```\r\nThe kind of hmac to use.  This defaults to :sha1.  You can set other values\r\nironclad supports; but my testing currrently indicates it doesn't work.  This\r\nisn't part of the HOTP spec, but the TOTP spec extends HTOP ... even if nobody\r\nusest this extension.\r\n\r\n```common-lisp\r\n(htop:hotp <secret> <counter>)\r\n```\r\n<secret> is a string of 20 characters hex digits; more if your using a different hmac sha.\r\n```common-lisp\r\ntotp:*time-zero*\r\n```\r\nDefaults to zero, a unix time.  See the RFC for details.\r\n```common-lisp\r\ntotp:*time-step-in-seconds*\r\n```\r\nDefaults to 30, a unix time interval.  See the RFC for details.\r\n\r\n```common-lisp\r\n(totp:totp <secret> &optional offset unix-time)\r\n```\r\n<secret> as in htop:htop.  The offset defaults to zero.  The unix-time defaults\r\nto the current unix-time.  The offset is used to get totp values nearby times\r\nslots, it is in seconds.\r\n\r\n# See also:\r\n+ HOTP RFC4226 http://tools.ietf.org/html/rfc4226\r\n+ TOTP RFC6238 http://tools.ietf.org/html/rfc6238\r\n+ Code for Google's Authenticator App is available: https://code.google.com/p/google-authenticator/\r\n+ Check your app store for the actual application: http://support.google.com/accounts/bin/answer.py?hl=en&answer=1066447\r\n+ Wikipedia is accumulating a list of places totp and hotp are used here: http://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm\r\n+ Open issues: https://github.com/bhyde/cl-one-time-passwords/issues\r\n\r\n# Warning\r\nThis code as not yet been used in production.  I look forward to reports back from the field.  :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}